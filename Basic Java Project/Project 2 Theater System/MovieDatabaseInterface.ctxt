#BlueJ class context
comment0.params=
comment0.target=MovieDatabaseInterface()
comment0.text=\r\n\ Constructor\ for\ objects\ of\ class\ MovieDatabaseInterface\r\n
comment1.params=
comment1.target=java.util.ArrayList\ readFile()
comment1.text=\r\n\ Read\ the\ text\ file\ into\ a\ line\ collection\r\n\ each\ object\ of\ the\ collection\ is\ a\ line\ in\ the\ text\r\n\ \r\n\ @return\ \ \ \ \ the\ text\ line\ collection\ \r\n
comment10.params=
comment10.target=java.lang.String\ InputString()
comment10.text=\r\n\ String\ input\ method.\r\n\ \r\n\ @return\ \ input,\ the\ input\ string.\r\n
comment11.params=
comment11.target=java.lang.Integer\ InputInt()
comment11.text=\r\n\ integer\ input\ method.\r\n\ \r\n\ @return\ \ inputInteger.\r\n
comment12.params=movieList
comment12.target=void\ displayMovie(java.util.ArrayList)
comment12.text=\r\n\ Display\ each\ movie\ in\ movie\ list.\r\n\ \r\n\ @param\ \ \ movieList,\ the\ collection\ of\ movies,\ using\ arraylist.\r\n
comment13.params=actorList
comment13.target=void\ displayActorList(ActorCollection)
comment13.text=\r\n\ Display\ each\ actor\ in\ one\ actor\ list\r\n\ \r\n\ @param\ \ \ actorList,\ object\ of\ ActorCollection\r\n
comment14.params=inputOp
comment14.target=boolean\ functionChoice(java.lang.String)
comment14.text=\r\n\ This\ method\ is\ used\ to\ choice\ the\ operation.\r\n\ And\ invoke\ all\ functions\ of\ movie\ collection\ to\ deal\ the\ collection.\r\n\ The\ main\ method\ of\ function\ part.\r\n\ \r\n\ @param\ \ \ inputOp,\ the\ input\ opetation\ number\r\n\ @return\ \ notExit,\ the\ boolean\ value,\ for\ controling\ the\ while\ loop\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ notExit\ \=\ false\ when\ inputOp\ \=\ 5\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ notExit\ \=\ true\ when\ inputOp\ \=\ else\r\n
comment15.params=
comment15.target=void\ clearControl()
comment15.text=\r\n\ method\ of\ clear\ crean\ control.\r\n
comment16.params=
comment16.target=void\ wrongInput()
comment16.text=\r\n\ input\ wrong\ number.\r\n
comment17.params=
comment17.target=void\ searchMovie()
comment17.text=\r\n\ Method\ of\ searching\ movie\ function.\r\n\ movie\ title\ and\ director\ can\ be\ used\ to\ search\r\n
comment18.params=
comment18.target=java.util.ArrayList\ searchTitleDisplay()
comment18.text=\r\n\ This\ method\ is\ used\ to\ search\ movie\ and\ display\ by\ title.\r\n\ In\ this\ method,\ particial\ title\ is\ accepted.\r\n
comment19.params=partTitle
comment19.target=java.util.ArrayList\ searchTitle(java.lang.String)
comment19.text=\r\n\ searching\ the\ movie\ by\ partitial\ title.\r\n\ \r\n\ @param\ \ \ partTitle\r\n
comment2.params=movieInfo
comment2.target=java.lang.String[]\ splitOneLine(java.lang.String)
comment2.text=\r\n\ this\ method\ is\ used\ to\ split\ each\ line\ of\ file\ (a\ String).\r\n\ readed\ collection\ into\ an\ array.\r\n\ splited\ by\ ",\ ".\r\n\ \r\n\ @param\ \ \ movieInfo,\ one\ text\ line\ of\ the\ collection\ returned\ by\ readFile().\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \r\n\ @return\ \ aMovieInfo,\ the\ spited\ line\ for\ one\ movie\ information.\r\n
comment20.params=
comment20.target=void\ searchDirectorsDisplay()
comment20.text=\r\n\ This\ method\ is\ used\ to\ search\ movie\ and\ display\ by\ director\ name.\r\n\ The\ name\ must\ be\ the\ full\ name.\r\n\ particial\ name\ will\ not\ be\ be\ accepted\ in\ this\ method.\r\n\ More\ than\ one\ director\ are\ accepted\ in\ this\ searching\ function.\r\n
comment21.params=number
comment21.target=void\ searchDirectors(int)
comment21.text=\r\n\ searching\ movie\ by\ full\ director\ name.\r\n\ \r\n\ @param\ \ \ number.\ the\ number\ of\ directors\r\n
comment22.params=i
comment22.target=java.util.ArrayList\ searchOneDirector(int)
comment22.text=\r\n\ This\ method\ is\ used\ to\ search\ movie\ by\ only\ one\ director.\r\n\ \r\n\ @param\ \ \ i,\ the\ sequnce\ of\ the\ diretory\r\n\ @return\ \ searchedList,\ the\ list\ of\ matching\ movie.\r\n
comment23.params=
comment23.target=void\ addMovie()
comment23.text=\r\n\ method\ is\ the\ main\ method\ for\ adding\ new\ movie.\r\n\ Only\ the\ uneque\ movie\ title\ can\ be\ added\ in\ the\ movie\ collection.\r\n
comment24.params=
comment24.target=java.lang.String\ inputTitle()
comment24.text=\r\n\ set\ title\ for\ new\ movie\r\n\ \r\n\ @param\ title\r\n
comment25.params=input
comment25.target=boolean\ isInputEmpty(java.lang.String)
comment25.text=\r\n\ check\ the\ input\ would\ be\ empty.\r\n\ \r\n\ @param\ \ \ title\r\n\ @return\ \ boolean\r\n
comment26.params=title
comment26.target=boolean\ isTitleExist(java.lang.String)
comment26.text=\r\n\ check\ if\ the\ input\ title\ exist.\r\n\ \r\n\ @param\ \ \ title\r\n\ @return\ \ boolean\r\n
comment27.params=
comment27.target=java.lang.String\ inputDirector()
comment27.text=\r\n\ set\ director\ name\ for\ new\ movie\r\n\ \r\n\ @return\ \ direcName.\r\n
comment28.params=name
comment28.target=boolean\ isNameIllegal(java.lang.String)
comment28.text=\r\n\ check\ if\ the\ input\ name\ contains\ any\ special\ charactor.\r\n\ \r\n\ @param\ \ \ name\r\n\ @return\ \ boolean\r\n
comment29.params=
comment29.target=ActorCollection\ buildActorList()
comment29.text=\r\n\ build\ a\ actor\ collection\r\n\ \r\n\ @param\ \ \ a\ actor\ list\r\n\ @return\ \ object\ of\ actor\ collection.\r\n
comment3.params=aLine
comment3.target=Movie\ buildOneMovie(java.lang.String)
comment3.text=\r\n\ This\ method\ is\ used\ to\ build\ one\ movie.\r\n\ It\ will\ call\ the\ splitOneLine(String\ ...)\ to\ get\ movie\ information.\r\n\ This\ part\ is\ used\ for\ reading\ information\ from\ text\ into\ movie\ collection.\r\n\ Read\ the\ information\ of\ a\ line\ into\ a\ movie\r\n\ \r\n\ @param\ \ \ aLine,\ one\ line\ in\ the\ text\ file\r\n\ @return\ \ aMovie,\ one\ object\ of\ Movie\ class\r\n
comment30.params=actors
comment30.target=boolean\ isSameActor(ActorCollection)
comment30.text=\r\n\ Check\ the\ same\ actor\r\n\ \r\n\ @param\ \ \ actor\ list\r\n\ @return\ \ boolean.\r\n
comment31.params=actors
comment31.target=boolean\ isAllActorEmpty(ActorCollection)
comment31.text=\r\n\ check\ all\ actors\ are\ empty.\r\n
comment32.params=i
comment32.target=Actor\ inputOneActor(int)
comment32.text=\r\n\ set\ one\ actor\ into\ actor\ list\r\n\ \r\n\ @param\ \ \ i,\ sequence\ of\ the\ actor\r\n\ @retun\ \ \ actor\ object.\r\n
comment33.params=
comment33.target=java.lang.String\ inputRating()
comment33.text=\r\n\ set\ rating\ into\ new\ movie\r\n\ \r\n\ @return\ \ \ rating.\r\n
comment34.params=rating
comment34.target=boolean\ isRatingWrong(java.lang.String)
comment34.text=\r\n\ check\ if\ the\ input\ rating\ is\ number\ and\ in\ range.\r\n\ \r\n\ @param\ \ \ rating\r\n\ @return\ \ boolean\r\n
comment35.params=
comment35.target=void\ deleteMovie()
comment35.text=\r\n\ Method\ of\ movie\ deletion\ function\r\n
comment36.params=deleteList
comment36.target=void\ selectMovies(java.util.ArrayList)
comment36.text=\r\n\ delete\ specific\ movie.\r\n\ \r\n\ @param\ \ \ arraylist\ of\ movie\r\n
comment37.params=
comment37.target=void\ favouriteMovies()
comment37.text=\r\n\ display\ the\ favor\ movies.\r\n
comment38.params=
comment38.target=Movie\ selectMovie()
comment38.text=\r\n\ select\ editing\ movie\r\n\ \r\n\ @return\ \ one\ movie\r\n
comment39.params=oneMovie
comment39.target=Movie\ determineTarget(Movie)
comment39.text=\r\n\ find\ out\ the\ target\ movie\ in\ movie\ collection\r\n
comment4.params=aLineInfo
comment4.target=ActorCollection\ buildActorList(java.lang.String[])
comment4.text=\r\n\ this\ method\ is\ used\ to\ build\ a\ actor\ list.\r\n\ this\ actor\ list\ will\ be\ invoked\ by\ build\ movie\ method\ to\ get\ the\ actor\ part\ of\ movie.\r\n\ this\ part\ is\ used\ for\ reading\ information\ from\ text\ into\ actor\ collection.\r\n\ \r\n\ @param\ \ \ actorInfo,\ the\ array\ of\ string\ reading\ from\ text\ file\r\n\ @return\ \ actors,\ the\ actor\ list\r\n
comment40.params=
comment40.target=void\ editMovie()
comment40.text=\r\n\ choice\ edit\ part,\ (actors\ or\ rating)\r\n
comment41.params=
comment41.target=void\ display()
comment5.params=
comment5.target=void\ recordMovieCollection()
comment5.text=\r\n\ This\ method\ is\ used\ to\ read\ the\ text\ file\ by\ calling\ readFile().\r\n\ Read\ the\ file\ into\ the\ movie\ collection\ and\ set\ the\ colection\ into\ \r\n\ the\ MovieCollection\ object.\r\n\ This\ method\ combine\ the\ method,\ readFile(),\ buildOneMovie(String\ ...).\r\n
comment6.params=
comment6.target=void\ displayMovie()
comment7.params=
comment7.target=void\ writetMovieToFile()
comment7.text=\r\n\ Method\ of\ writing\ the\ movies\ in\ the\ movie\ collection\ into\ the\ text\ file\r\n
comment8.params=
comment8.target=void\ titleDisplay()
comment8.text=\r\n\ Title\ display\ method.\ \r\n\ This\ method\ will\ be\ used\ in\ the\ top\ of\ the\ screan\ for\ every\ showing.\ \r\n
comment9.params=
comment9.target=void\ menuDisplay()
comment9.text=\r\n\ Menu\ display\ method.\r\n
numComments=42
